public class Prescription
{
    public int PrescriptionID { get; set; }
    public string PatientName { get; set; }
    public string MedicationName { get; set; }
    public double Dosage { get; set; }

    public Prescription(int prescriptionID, string patientName, string medicationName, double dosage)
    {
        PrescriptionID = prescriptionID;
        PatientName = patientName;
        MedicationName = medicationName;
        Dosage = dosage;
    }

    public override string ToString()
    {
        return $"Prescription ID: {PrescriptionID}, Patient Name: {PatientName}, Medication Name: {MedicationName}, Dosage: {Dosage} mg";
    }
}

internal class Programs
{
 
    static void Main(string[] args)
    {
        Console.Write("Enter the number of Prescription: ");
        int N = int.Parse(Console.ReadLine());

        if (N < 3)
        {
            Console.WriteLine("Not enough prescriptions to find the third least dosage.");
            return;
        }

        Prescription[] prescriptions = new Prescription[N];

        for(int i = 0; i < N; i++)
        {
            Console.WriteLine($"Enter the details for Prescription{ i + 1}:");
            Console.Write("Prescription ID:");
            int prescriptionID = int.Parse(Console.ReadLine());
            Console.Write("Patient Name:");
            string patientName = Console.ReadLine();
            Console.Write("Medication Name:");
            string medicationName = Console.ReadLine();
            Console.Write("Dosage in milligrams:");
            double dosage = double.Parse(Console.ReadLine());

            prescriptions[i] = new Prescription(prescriptionID, patientName, medicationName, dosage);
        }

        Prescription maxDosage = prescriptions[0];
        foreach (var prescription in prescriptions)
        {
            if(prescription.Dosage > maxDosage.Dosage)
            {
                maxDosage = prescription;
            }
        }

        Console.WriteLine("Prescription with Maximum Dosage : ");
        Console.WriteLine(maxDosage);

        double firstMinDos = double.MaxValue;
        double secondMinDos = double.MaxValue;
        double thirdMinDos = double.MaxValue;
        Prescription thirdLeastPrescription = null;
        foreach (var prescription in prescriptions)
        {
            double dosage = prescription.Dosage;
            if(dosage < firstMinDos)
            {
                thirdMinDos = secondMinDos;
                secondMinDos = firstMinDos;
                firstMinDos = dosage;
            }
            else if (dosage < secondMinDos && dosage != firstMinDos)
            {
                thirdMinDos = secondMinDos;
                secondMinDos = dosage;
            }
            else if (dosage < thirdMinDos && dosage != secondMinDos && dosage != firstMinDos )
            {
                thirdMinDos = dosage;
            }
        }

        foreach (var prescription in prescriptions)
        {
            if(prescription.Dosage == thirdMinDos)
            {
                thirdLeastPrescription = prescription;
                break;
            }
        }
        if (thirdLeastPrescription != null)
        {
            Console.WriteLine("Prescription with the third least dosage: ");
            Console.WriteLine(thirdLeastPrescription);
        }


        for (int i = 0; i < prescriptions.Length - 1; i++)
        {
            int minIndex = i;
            for (int j = i + 1; j < prescriptions.Length;  j++)
            {
                if (prescriptions[j].MedicationName.CompareTo(prescriptions[minIndex].MedicationName) < 0 )
                {
                    minIndex = j;
                }
            }

            if (minIndex != i)
            {
                Prescription temp = prescriptions[i];
                prescriptions[i] = prescriptions[minIndex];
                prescriptions[minIndex] = temp;
            }
        }

        Console.WriteLine("Sorted Prescription by Medication Name: ");
        foreach (var prescription in prescriptions)
        {
            Console.WriteLine(prescription);
        }
    }
}
